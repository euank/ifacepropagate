// Code generated by github.com/euank/ifacepropagate

package case01

import (
	"ifacepropogate.testcase/test01/pkg"
	"io"
)

type ifacepropagateIfaceAlias0 interface {
	io.Reader
}

func (r readCloseFrobulator) propogateInterfaces() io.Reader {
	_, ok0 := r.Reader.(ifacepropagateIfaceAlias0)
	_, ok1 := r.Reader.(pkg.Frobulator)
	switch {
	case ok0 && ok1:
		return struct {
			io.Reader
			ifacepropagateIfaceAlias0
			pkg.Frobulator
		}{r, r, r}
	case !ok0 && ok1:
		return struct {
			io.Reader
			pkg.Frobulator
		}{r, r}
	case ok0 && !ok1:
		return struct {
			io.Reader
			ifacepropagateIfaceAlias0
		}{r, r}
	case !ok0 && !ok1:
		return struct {
			io.Reader
		}{r}
	default:
		panic("unreachable")
	}
}
func (r readCloseFrobulator) Read(p []byte) (n int, err error) {
	return r.Reader.(ifacepropagateIfaceAlias0).Read(p)
}
func (r readCloseFrobulator) Frobulate() {
	r.Reader.(pkg.Frobulator).Frobulate()
}
